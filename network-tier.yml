
AWSTemplateFormatVersion: '2010-09-09'
Description: >-
 This template deploys a VPC, two public subnets and six private subnets across two Availability Zones. 
 It also deploys an internet gateway and two custom route tables - one for the public subnets and the other for the private subnets. 
 Lastly, it deploys two NAT gateways (one in each public subnet) to allow the private subnet access to the internet and EC2 Security Groups

Parameters:
  EnvironmentName:
    Description: Name for the deployment environment. It'll also be the prefix for the names of resources deployed by this template
    Type: String
    Default: Demo

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.10.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in Availability Zone one
    Type: String
    Default: 10.10.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in Availability Zone two
    Type: String
    Default: 10.10.11.0/24

  WebTierPrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the Web Tier private subnet in Availability Zone one
    Type: String
    Default: 10.10.20.0/24

  WebTierPrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the Web Tier private subnet in Availability Zone two
    Type: String
    Default: 10.10.21.0/24
  
  AppTierPrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the App Tier private subnet in Availability Zone one
    Type: String
    Default: 10.10.30.0/24

  AppTierPrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the App Tier private subnet in Availability Zone two
    Type: String
    Default: 10.10.31.0/24

  DataTierPrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the Data Tier private subnet in Availability Zone one
    Type: String
    Default: 10.10.40.0/24

  DataTierPrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the Data Tier private subnet in Availability Zone two
    Type: String
    Default: 10.10.41.0/24

Resources:
  # VPC & IGW Resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  
  # Public & Private subnets' Resources
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  WebTierPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref WebTierPrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Web Tier Private Subnet (AZ1)

  WebTierPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref WebTierPrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Web Tier Private Subnet (AZ2)

  DataTierPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref DataTierPrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Data Tier Private Subnet (AZ1)

  DataTierPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref DataTierPrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Data Tier Private Subnet (AZ2)

  AppTierPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref AppTierPrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} App Tier Private Subnet (AZ1)

  AppTierPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref AppTierPrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} App Tier Private Subnet (AZ2)

  # NAT Gatways Resources
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  # Route tables,routes & Subnet route tables' associations
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  AZ1PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  AZ1PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref AZ1PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  WebTierSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AZ1PrivateRouteTable
      SubnetId: !Ref WebTierPrivateSubnet1

  DataTierSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AZ1PrivateRouteTable
      SubnetId: !Ref DataTierPrivateSubnet1

  AppTierSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AZ1PrivateRouteTable
      SubnetId: !Ref AppTierPrivateSubnet1

  AZ2PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  AZ2PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref AZ2PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  WebTierSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AZ2PrivateRouteTable
      SubnetId: !Ref WebTierPrivateSubnet2

  DataTierSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AZ2PrivateRouteTable
      SubnetId: !Ref DataTierPrivateSubnet2

  AppTierSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref AZ2PrivateRouteTable
      SubnetId: !Ref AppTierPrivateSubnet2

  # Security Groups

  ExternalLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group with http allow rule"
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
      VpcId: !Ref VPC

  WebTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allows external LB access on port 80"
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !GetAtt ExternalLBSecurityGroup.GroupId
          FromPort: 80
          ToPort: 80
      VpcId: !Ref VPC
  
  WebTierICMPIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
        GroupId: !GetAtt WebTierSecurityGroup.GroupId
        IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        SourceSecurityGroupId: !GetAtt WebTierSecurityGroup.GroupId
  WebTierFullAccessIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
        GroupId: !GetAtt WebTierSecurityGroup.GroupId
        IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        SourceSecurityGroupId: !GetAtt WebTierSecurityGroup.GroupId

  InternalLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allows Web Tier Access on port 80"
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !GetAtt WebTierSecurityGroup.GroupId
          FromPort: 80
          ToPort: 80
      VpcId: !Ref VPC

  AppTierInternalLBIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
        GroupId: !GetAtt InternalLBSecurityGroup.GroupId
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !GetAtt AppTierSecurityGroup.GroupId
  
  AppTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allows internal LB access on port 80"
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !GetAtt InternalLBSecurityGroup.GroupId
          FromPort: 80
          ToPort: 80
      VpcId: !Ref VPC
  
  AppTierICMPIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
        GroupId: !GetAtt AppTierSecurityGroup.GroupId
        IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        SourceSecurityGroupId: !GetAtt AppTierSecurityGroup.GroupId
  AppTierFullAccessIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
        GroupId: !GetAtt AppTierSecurityGroup.GroupId
        IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        SourceSecurityGroupId: !GetAtt AppTierSecurityGroup.GroupId

  DataTierSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allows Access on port 3306"
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !GetAtt AppTierSecurityGroup.GroupId
          FromPort: 3306
          ToPort: 3306
      VpcId: !Ref VPC


# Outputs

Outputs:
  VPC:
    Description: ID for the created VPC
    Value: !Ref VPC
    Export:
      Name: 
        !Sub "${AWS::StackName}-VPC-ID"

  PublicSubnet1:
    Description: ID for the public subnet in Availability Zone one
    Value: !Ref PublicSubnet1
    Export:
      Name: 
        !Sub "${AWS::StackName}-PublicSubnet1-ID"

  PublicSubnet2:
    Description: ID for the public subnet in Availability Zone two
    Value: !Ref PublicSubnet2
    Export:
      Name:
        !Sub "${AWS::StackName}-PublicSubnet2-ID"

  WebTierPrivateSubnet1:
    Description: Web Tier subnet ID in Availability Zone one
    Value: !Ref WebTierPrivateSubnet1
    Export:
      Name: 
        !Sub "${AWS::StackName}-WebTierPrivateSubnet1-ID"

  WebTierPrivateSubnet2:
    Description: Web Tier subnet ID in Availability Zone two
    Value: !Ref WebTierPrivateSubnet2
    Export:
      Name:
        !Sub "${AWS::StackName}-WebTierPrivateSubnet2-ID"

  AppTierPrivateSubnet1:
    Description: App Tier subnet ID in Availability Zone one
    Value: !Ref AppTierPrivateSubnet1
    Export:
      Name: 
        !Sub "${AWS::StackName}-AppTierPrivateSubnet1-ID"

  AppTierPrivateSubnet2:
    Description: App Tier subnet ID in Availability Zone two
    Value: !Ref AppTierPrivateSubnet2
    Export:
      Name: 
        !Sub "${AWS::StackName}-AppTierPrivateSubnet2-ID"
  
  DataTierPrivateSubnet1:
    Description: Data Tier subnet ID in Availability Zone two
    Value: !Ref DataTierPrivateSubnet1
    Export:
      Name: 
        !Sub "${AWS::StackName}-DataTierPrivateSubnet1-ID"
   
  DataTierPrivateSubnet2:
    Description: Data Tier subnet ID in Availability Zone two
    Value: !Ref DataTierPrivateSubnet2
    Export:
      Name: 
        !Sub "${AWS::StackName}-DataTierPrivateSubnet2-ID"

  ExternalLBSecurityGroup:
    Description: External LB Security Group ID
    Value: !GetAtt ExternalLBSecurityGroup.GroupId
    Export:
      Name: 
        !Sub "${AWS::StackName}-ExternalLBSecurityGroup-ID"

  InternalLBSecurityGroup:
    Description: Internal LB Security Group ID
    Value: !GetAtt InternalLBSecurityGroup.GroupId
    Export:
      Name: 
        !Sub "${AWS::StackName}-InternalLBSecurityGroup-ID"

  WebTierSecurityGroup:
    Description: Web Tier Security Group ID
    Value: !GetAtt WebTierSecurityGroup.GroupId
    Export:
      Name: 
        !Sub "${AWS::StackName}-WebTierSecurityGroup-ID"
  
  AppTierSecurityGroup:
    Description: App Tier Security Group ID
    Value: !GetAtt AppTierSecurityGroup.GroupId
    Export:
      Name: 
        !Sub "${AWS::StackName}-AppTierSecurityGroup-ID"

  DataTierSecurityGroup:
    Description: Data Tier Security Group ID
    Value: !GetAtt DataTierSecurityGroup.GroupId
    Export:
      Name: 
        !Sub "${AWS::StackName}-DataTierSecurityGroup-ID"